# -*- coding: utf-8 -*-
"""Copy of zomato

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-QQeN2_gZdnA85evEtX6LXm7gtIu2pRx
"""









from google.colab import drive
drive.mount('/content/drive')

##IMPORTING LIBRARIES FOR PREPROCESSING AND VISUALIZATION
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('dark_background')


df=pd.read_csv("/content/drive/MyDrive/Copy of zomato (1).csv")
df

df.columns

#DROPING COLUMNS
df = df.drop(['url','address','phone','menu_item','dish_liked','reviews_list'], axis=1)
df.head()

df.info()

#DROPPING DUPLICATES
df.drop_duplicates(inplace = True)
df.shape

df['rate'].unique()

#HANDLING RATE VALUES
def handlerate(value):
    if(value=='NEW' or value=='-'):
        return np.nan
    else:
        value = str(value).split('/')
        value = value[0]
        return float(value)

df['rate'] = df['rate'].apply(handlerate)
df['rate']



#FILLING MISSING RATE VALUES UING MEAN
df['rate'].fillna(df['rate'].mean(), inplace =True)
df['rate'].isnull().sum()





df.dropna(inplace = True)
df







from google.colab import drive
drive.mount('/content/drive')

#RENAMING COLUMN WITH A SMALLER NAME
df.rename(columns={'approx_cost(for two people)':'cost2plates','listed_in(type)':'type'}, inplace =True)
df.head()

#HANDLING ',' VALUES IN THE DATA
def handlecomma(value):

  value=str(value)
  if ',' in value:
    value=value.replace(',','')
    return float(value)
  else:
    return float(value)
df['cost2plates'] = df['cost2plates'].apply(handlecomma)
df['cost2plates']

rest_type=df['rest_type'].value_counts(ascending = False)
rest_type

#Making Rest Types less than 1000 in frequency as others
rest_types_lessthan1000 = rest_type[rest_type<1000]

def handle_rest_type(value):
    if(value in rest_types_lessthan1000):
        return 'others'
    else:
        return value

df['rest_type'] = df['rest_type'].apply(handle_rest_type)
df['rest_type'].value_counts()

#Making Rest Types less than 300 in frequency as others
location = df['location'].value_counts(ascending  = False)
location_lessthan300 = location[location<300]
def handle_location(value):
    if(value in location_lessthan300):
        return 'others'
    else:
        return value

df['location'] = df['location'].apply(handle_location)
df['location'].value_counts()

cuisines = df['cuisines'].value_counts(ascending  = False)
cuisines_lessthan100 = cuisines[cuisines<100]
def handle_cuisines(value):
    if(value in cuisines_lessthan100):
        return 'others'
    else:
        return value
df['cuisines'] = df['cuisines'].apply(handle_cuisines)
df['cuisines'].value_counts()

df.head()

plt.figure(figsize= (16,10))
sns.countplot(df['location'])
plt.xticks(rotation=360)

plt.figure(figsize = (6,6))
sns.countplot(df['online_order'], palette = 'inferno')

plt.figure(figsize = (6,6))
sns.countplot(df['book_table'], palette = 'rainbow')

plt.figure(figsize = (6,6))
sns.boxplot(x = 'book_table', y = 'rate', data = df)

plt.figure(figsize = (6,6))
sns.boxplot(x = 'book_table', y = 'rate', data = df)

df1 = df.groupby(['location','online_order'])['name'].count()
df1.to_csv('location_online.csv')
df1 = pd.read_csv('location_online.csv')
df1 = pd.pivot_table(df1, values=None, index=['location'], columns=['online_order'], fill_value=0, aggfunc=np.sum)
df1

df1.plot(kind = 'bar', figsize = (36,8))

df2 = df.groupby(['location','book_table'])['name'].count()
df2.to_csv('location_booktable.csv')
df2 = pd.read_csv('location_booktable.csv')
df2 = pd.pivot_table(df2, values=None, index=['location'], columns=['book_table'], fill_value=0, aggfunc=np.sum)
df2

df2.plot(kind = 'bar', figsize = (36,8))

df3 = df.groupby(['location','type'])['name'].count()
df3.to_csv('location_type.csv')
df3 = pd.read_csv('location_type.csv')
df3 = pd.pivot_table(df3, values=None, index=['location'], columns=['type'], fill_value=0, aggfunc=np.sum)
df3

df3.plot(kind = 'bar', figsize = (36,8))

df4 = df[['location', 'votes']]
df4.drop_duplicates()
df5 = df4.groupby(['location'])['votes'].sum()
df5 = df5.to_frame()
df5 = df5.sort_values('votes', ascending=False)
df5.head()



df6 = df.groupby('location')['votes'].sum().reset_index()
plt.figure(figsize = (15,8))
sns.barplot(x='location', y='votes',data=df5)
plt.xticks(rotation = 90)

plt.figure(figsize = (14, 8))
sns.boxplot(x = 'type', y = 'rate', data = df, palette = 'inferno' , linecolor="white" )







df.head()